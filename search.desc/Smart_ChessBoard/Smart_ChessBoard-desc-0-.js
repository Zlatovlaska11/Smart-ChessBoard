searchState.loadedDescShard("Smart_ChessBoard", 0, "Checks if a move is possible and if yes makes it the move …\nadds a piece to a square (force place) if piece is here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes a fen notation string and returns a chessboard with …\nAbstraction over square haspiece checking if a square is …\nChecks if a square is ocupied by a piece if piece is there …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nchecks if a move is valid returns bool\nReturns a new Piece type based on the char\nPrints the board to the terminal <code>ChessBoard</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")